{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rkama\\\\OneDrive\\\\Desktop\\\\FSD\\\\Mini-Project\\\\frontend\\\\src\\\\FileUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { FFmpeg } from \"@ffmpeg/ffmpeg\";\nimport { fetchFile, toBlobURL } from \"@ffmpeg/util\";\nimport axios from \"axios\";\nimport \"./FileUpload.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_FILE_SIZE = 100 * 1024 * 1024; // 100MB\nconst ALLOWED_VIDEO_TYPES = [\"video/mp4\", \"video/webm\", \"video/ogg\"];\nconst FileUpload = () => {\n  _s();\n  const [ffmpeg] = useState(() => new FFmpeg());\n  const [file, setFile] = useState(null);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [ffmpegLoaded, setFfmpegLoaded] = useState(false);\n  const [conversionProgress, setConversionProgress] = useState(0);\n  const [showChatbot, setShowChatbot] = useState(false);\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [chatHistory, setChatHistory] = useState([]);\n  const [processingStatus, setProcessingStatus] = useState(\"\");\n\n  // Load FFmpeg WebAssembly library\n  useEffect(() => {\n    const loadFFmpeg = async () => {\n      try {\n        await ffmpeg.load({\n          coreURL: await toBlobURL(\"https://unpkg.com/@ffmpeg/core@0.12.4/dist/umd/ffmpeg-core.js\", \"text/javascript\"),\n          wasmURL: await toBlobURL(\"https://unpkg.com/@ffmpeg/core@0.12.4/dist/umd/ffmpeg-core.wasm\", \"application/wasm\")\n        });\n        setFfmpegLoaded(true);\n      } catch (error) {\n        console.error(\"Error loading FFmpeg:\", error);\n        setErrorMessage(\"Error loading audio processor. Please try again.\");\n      }\n    };\n    loadFFmpeg();\n  }, [ffmpeg]);\n  useEffect(() => {\n    return () => {\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    };\n  }, [audioUrl]);\n  const validateFile = useCallback(file => {\n    if (!file) {\n      throw new Error(\"Please select a file to upload.\");\n    }\n    if (!ALLOWED_VIDEO_TYPES.includes(file.type)) {\n      throw new Error(\"Please select a valid video file (MP4, WebM, or OGG).\");\n    }\n    if (file.size > MAX_FILE_SIZE) {\n      throw new Error(\"File size exceeds 100MB limit.\");\n    }\n  }, []);\n  const handleFileChange = useCallback(event => {\n    const selectedFile = event.target.files[0];\n    try {\n      validateFile(selectedFile);\n      setFile(selectedFile);\n      setErrorMessage(\"\");\n      setAudioUrl(null);\n      setShowSuccess(false);\n      setConversionProgress(0);\n      setShowChatbot(false);\n      setChatHistory([]);\n    } catch (error) {\n      setErrorMessage(error.message);\n      setFile(null);\n    }\n  }, [validateFile]);\n  const handleChatSubmit = async e => {\n    e.preventDefault();\n    if (!chatMessage.trim()) return;\n    const userMessage = chatMessage.trim();\n\n    // Add user message to chat history immediately\n    setChatHistory(prev => [...prev, {\n      role: \"user\",\n      content: userMessage\n    }]);\n\n    // Clear input field\n    setChatMessage(\"\");\n    try {\n      // Make the API request to the backend\n      const response = await axios.post(\"http://localhost:5001/api/chat\", {\n        userMessage // Match the key in the backend\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      // Handle the response from the Gemini AI\n      setChatHistory(prev => [...prev, {\n        role: \"bot\",\n        content: response.data.reply || \"No response received from Gemini.\"\n      }]);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Error in Gemini API:\", error);\n\n      // Determine the error message to display\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || \"Sorry, I encountered an error while connecting to Gemini.\";\n      setChatHistory(prev => [...prev, {\n        role: \"bot\",\n        content: errorMessage\n      }]);\n    }\n  };\n  const extractAudio = async videoFile => {\n    try {\n      console.log(\"Starting audio extraction from video:\", {\n        fileName: videoFile.name,\n        fileType: videoFile.type,\n        fileSize: videoFile.size\n      });\n\n      // Write video file to FFmpeg\n      console.log(\"Writing video file to FFmpeg...\");\n      await ffmpeg.writeFile(\"input.mp4\", await fetchFile(videoFile));\n      console.log(\"Video file written successfully\");\n\n      // Log FFmpeg version and configuration\n      const ffmpegVersion = await ffmpeg.exec([\"-version\"]);\n      console.log(\"FFmpeg version:\", ffmpegVersion);\n\n      // Set up progress monitoring\n      ffmpeg.on(\"progress\", ({\n        progress,\n        time\n      }) => {\n        console.log(\"Extraction progress:\", {\n          progress: Math.round(progress * 100),\n          timeMs: time\n        });\n        setConversionProgress(Math.round(progress * 100));\n      });\n\n      // Extract audio with more detailed parameters\n      console.log(\"Starting audio extraction...\");\n      await ffmpeg.exec([\"-i\", \"input.mp4\", \"-vn\",\n      // No video\n      \"-acodec\", \"libmp3lame\",\n      // MP3 codec\n      \"-ab\", \"128k\",\n      // Bitrate\n      \"-ar\", \"44100\",\n      // Sample rate\n      \"-y\",\n      // Overwrite output\n      \"output.mp3\"]);\n      console.log(\"Audio extraction completed\");\n\n      // Read the output file\n      console.log(\"Reading extracted audio file...\");\n      const data = await ffmpeg.readFile(\"output.mp3\");\n      console.log(\"Audio file read, size:\", data.buffer.byteLength);\n\n      // Create audio blob with explicit type\n      const audioBlob = new Blob([data.buffer], {\n        type: \"audio/mpeg\"\n      });\n      console.log(\"Audio blob created, size:\", audioBlob.size);\n\n      // Clean up files\n      console.log(\"Cleaning up temporary files...\");\n      await ffmpeg.deleteFile(\"input.mp4\");\n      await ffmpeg.deleteFile(\"output.mp3\");\n      console.log(\"Temporary files deleted\");\n      return audioBlob;\n    } catch (error) {\n      console.error(\"Audio extraction error:\", {\n        message: error.message,\n        stack: error.stack\n      });\n      throw new Error(`Failed to extract audio: ${error.message}`);\n    }\n  };\n  const saveAudioToServer = async audioBlob => {\n    const formData = new FormData();\n    formData.append(\"audio\", audioBlob, \"extracted-audio.mp3\");\n    try {\n      setProcessingStatus(\"Uploading to server...\");\n      const response = await axios.post(\"http://localhost:5000/api/upload-and-summarize\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        timeout: 60000,\n        // 60 second timeout\n        onUploadProgress: progressEvent => {\n          const uploadProgress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          setConversionProgress(uploadProgress);\n        }\n      });\n      if (response.data.error) {\n        throw new Error(response.data.error);\n      }\n      setAudioUrl(null);\n      return response.data;\n    } catch (error) {\n      if (error.code === \"ECONNABORTED\") {\n        throw new Error(\"Request timed out. Please try again with a shorter video.\");\n      }\n      if (error.response) {\n        throw new Error(`Server error: ${error.response.data.error || \"Unknown server error\"}`);\n      } else if (error.request) {\n        throw new Error(\"No response from server. Please check your connection.\");\n      } else {\n        throw new Error(`Upload failed: ${error.message}`);\n      }\n    } finally {\n      setProcessingStatus(\"\");\n    }\n  };\n  const handleUpload = async () => {\n    try {\n      if (!file) {\n        throw new Error(\"Please select a file to upload.\");\n      }\n      if (!ffmpegLoaded) {\n        throw new Error(\"Audio processor is not ready. Please wait.\");\n      }\n      setUploading(true);\n      setErrorMessage(\"\");\n\n      // Extract audio\n      setProcessingStatus(\"Extracting...\");\n      const audioBlob = await extractAudio(file);\n\n      // Upload and process\n      setProcessingStatus(\"Processing audio...\");\n      const result = await saveAudioToServer(audioBlob);\n\n      // Handle success\n      const url = URL.createObjectURL(audioBlob);\n      setAudioUrl(url);\n      setShowSuccess(true);\n      setTimeout(() => setShowSuccess(false), 5000);\n\n      // Show chatbot if summary is available\n      if (result.summary) {\n        setShowChatbot(true);\n        setChatHistory([{\n          role: \"bot\",\n          content: `Here's a summary of your lecture: ${result.summary}`\n        }]);\n      }\n    } catch (error) {\n      console.error(\"Processing Error:\", error);\n      setErrorMessage(error.message);\n    } finally {\n      setUploading(false);\n      setConversionProgress(0);\n      setProcessingStatus(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lecture-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Lecture Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Upload your video to get an AI summary!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"video/mp4, video/webm, video/ogg\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 28\n        }, this), file && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-button\",\n          onClick: handleUpload,\n          disabled: uploading,\n          children: uploading ? \"Uploading...\" : \"Upload and Summarize\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), processingStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processing-status\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: processingStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          value: conversionProgress,\n          max: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this), showSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Audio extracted successfully!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audio-player\",\n        children: /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: audioUrl,\n            type: \"audio/mpeg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 15\n          }, this), \"Your browser does not support the audio element.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this), showChatbot && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-history\",\n          children: chatHistory.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: msg.role,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 19\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleChatSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: chatMessage,\n            onChange: e => setChatMessage(e.target.value),\n            placeholder: \"Ask something...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"skjeKeuReoToc1IQ79aVHx+ZVdI=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","FFmpeg","fetchFile","toBlobURL","axios","jsxDEV","_jsxDEV","MAX_FILE_SIZE","ALLOWED_VIDEO_TYPES","FileUpload","_s","ffmpeg","file","setFile","audioUrl","setAudioUrl","uploading","setUploading","errorMessage","setErrorMessage","showSuccess","setShowSuccess","ffmpegLoaded","setFfmpegLoaded","conversionProgress","setConversionProgress","showChatbot","setShowChatbot","chatMessage","setChatMessage","chatHistory","setChatHistory","processingStatus","setProcessingStatus","loadFFmpeg","load","coreURL","wasmURL","error","console","URL","revokeObjectURL","validateFile","Error","includes","type","size","handleFileChange","event","selectedFile","target","files","message","handleChatSubmit","e","preventDefault","trim","userMessage","prev","role","content","response","post","headers","data","reply","_error$response","_error$response$data","extractAudio","videoFile","log","fileName","name","fileType","fileSize","writeFile","ffmpegVersion","exec","on","progress","time","Math","round","timeMs","readFile","buffer","byteLength","audioBlob","Blob","deleteFile","stack","saveAudioToServer","formData","FormData","append","timeout","onUploadProgress","progressEvent","uploadProgress","loaded","total","code","request","handleUpload","result","url","createObjectURL","setTimeout","summary","className","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","disabled","value","max","controls","src","map","msg","idx","onSubmit","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/rkama/OneDrive/Desktop/FSD/Mini-Project/frontend/src/FileUpload.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { FFmpeg } from \"@ffmpeg/ffmpeg\";\r\nimport { fetchFile, toBlobURL } from \"@ffmpeg/util\";\r\nimport axios from \"axios\";\r\nimport \"./FileUpload.css\";\r\n\r\nconst MAX_FILE_SIZE = 100 * 1024 * 1024; // 100MB\r\nconst ALLOWED_VIDEO_TYPES = [\"video/mp4\", \"video/webm\", \"video/ogg\"];\r\n\r\nconst FileUpload = () => {\r\n  const [ffmpeg] = useState(() => new FFmpeg());\r\n  const [file, setFile] = useState(null);\r\n  const [audioUrl, setAudioUrl] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n  const [ffmpegLoaded, setFfmpegLoaded] = useState(false);\r\n  const [conversionProgress, setConversionProgress] = useState(0);\r\n  const [showChatbot, setShowChatbot] = useState(false);\r\n  const [chatMessage, setChatMessage] = useState(\"\");\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [processingStatus, setProcessingStatus] = useState(\"\");\r\n\r\n  // Load FFmpeg WebAssembly library\r\n  useEffect(() => {\r\n    const loadFFmpeg = async () => {\r\n      try {\r\n        await ffmpeg.load({\r\n          coreURL: await toBlobURL(\r\n            \"https://unpkg.com/@ffmpeg/core@0.12.4/dist/umd/ffmpeg-core.js\",\r\n            \"text/javascript\"\r\n          ),\r\n          wasmURL: await toBlobURL(\r\n            \"https://unpkg.com/@ffmpeg/core@0.12.4/dist/umd/ffmpeg-core.wasm\",\r\n            \"application/wasm\"\r\n          ),\r\n        });\r\n        setFfmpegLoaded(true);\r\n      } catch (error) {\r\n        console.error(\"Error loading FFmpeg:\", error);\r\n        setErrorMessage(\"Error loading audio processor. Please try again.\");\r\n      }\r\n    };\r\n    loadFFmpeg();\r\n  }, [ffmpeg]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (audioUrl) {\r\n        URL.revokeObjectURL(audioUrl);\r\n      }\r\n    };\r\n  }, [audioUrl]);\r\n\r\n  const validateFile = useCallback((file) => {\r\n    if (!file) {\r\n      throw new Error(\"Please select a file to upload.\");\r\n    }\r\n\r\n    if (!ALLOWED_VIDEO_TYPES.includes(file.type)) {\r\n      throw new Error(\"Please select a valid video file (MP4, WebM, or OGG).\");\r\n    }\r\n\r\n    if (file.size > MAX_FILE_SIZE) {\r\n      throw new Error(\"File size exceeds 100MB limit.\");\r\n    }\r\n  }, []);\r\n\r\n  const handleFileChange = useCallback(\r\n    (event) => {\r\n      const selectedFile = event.target.files[0];\r\n      try {\r\n        validateFile(selectedFile);\r\n        setFile(selectedFile);\r\n        setErrorMessage(\"\");\r\n        setAudioUrl(null);\r\n        setShowSuccess(false);\r\n        setConversionProgress(0);\r\n        setShowChatbot(false);\r\n        setChatHistory([]);\r\n      } catch (error) {\r\n        setErrorMessage(error.message);\r\n        setFile(null);\r\n      }\r\n    },\r\n    [validateFile]\r\n  );\r\n\r\n  const handleChatSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!chatMessage.trim()) return;\r\n\r\n    const userMessage = chatMessage.trim();\r\n\r\n    // Add user message to chat history immediately\r\n    setChatHistory((prev) => [...prev, { role: \"user\", content: userMessage }]);\r\n\r\n    // Clear input field\r\n    setChatMessage(\"\");\r\n\r\n    try {\r\n      // Make the API request to the backend\r\n      const response = await axios.post(\r\n        \"http://localhost:5001/api/chat\",\r\n        {\r\n          userMessage, // Match the key in the backend\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      // Handle the response from the Gemini AI\r\n      setChatHistory((prev) => [\r\n        ...prev,\r\n        {\r\n          role: \"bot\",\r\n          content: response.data.reply || \"No response received from Gemini.\",\r\n        },\r\n      ]);\r\n    } catch (error) {\r\n      console.error(\"Error in Gemini API:\", error);\r\n\r\n      // Determine the error message to display\r\n      const errorMessage =\r\n        error.response?.data?.error ||\r\n        \"Sorry, I encountered an error while connecting to Gemini.\";\r\n\r\n      setChatHistory((prev) => [\r\n        ...prev,\r\n        {\r\n          role: \"bot\",\r\n          content: errorMessage,\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const extractAudio = async (videoFile) => {\r\n    try {\r\n      console.log(\"Starting audio extraction from video:\", {\r\n        fileName: videoFile.name,\r\n        fileType: videoFile.type,\r\n        fileSize: videoFile.size,\r\n      });\r\n\r\n      // Write video file to FFmpeg\r\n      console.log(\"Writing video file to FFmpeg...\");\r\n      await ffmpeg.writeFile(\"input.mp4\", await fetchFile(videoFile));\r\n      console.log(\"Video file written successfully\");\r\n\r\n      // Log FFmpeg version and configuration\r\n      const ffmpegVersion = await ffmpeg.exec([\"-version\"]);\r\n      console.log(\"FFmpeg version:\", ffmpegVersion);\r\n\r\n      // Set up progress monitoring\r\n      ffmpeg.on(\"progress\", ({ progress, time }) => {\r\n        console.log(\"Extraction progress:\", {\r\n          progress: Math.round(progress * 100),\r\n          timeMs: time,\r\n        });\r\n        setConversionProgress(Math.round(progress * 100));\r\n      });\r\n\r\n      // Extract audio with more detailed parameters\r\n      console.log(\"Starting audio extraction...\");\r\n      await ffmpeg.exec([\r\n        \"-i\",\r\n        \"input.mp4\",\r\n        \"-vn\", // No video\r\n        \"-acodec\",\r\n        \"libmp3lame\", // MP3 codec\r\n        \"-ab\",\r\n        \"128k\", // Bitrate\r\n        \"-ar\",\r\n        \"44100\", // Sample rate\r\n        \"-y\", // Overwrite output\r\n        \"output.mp3\",\r\n      ]);\r\n      console.log(\"Audio extraction completed\");\r\n\r\n      // Read the output file\r\n      console.log(\"Reading extracted audio file...\");\r\n      const data = await ffmpeg.readFile(\"output.mp3\");\r\n      console.log(\"Audio file read, size:\", data.buffer.byteLength);\r\n\r\n      // Create audio blob with explicit type\r\n      const audioBlob = new Blob([data.buffer], {\r\n        type: \"audio/mpeg\",\r\n      });\r\n      console.log(\"Audio blob created, size:\", audioBlob.size);\r\n\r\n      // Clean up files\r\n      console.log(\"Cleaning up temporary files...\");\r\n      await ffmpeg.deleteFile(\"input.mp4\");\r\n      await ffmpeg.deleteFile(\"output.mp3\");\r\n      console.log(\"Temporary files deleted\");\r\n\r\n      return audioBlob;\r\n    } catch (error) {\r\n      console.error(\"Audio extraction error:\", {\r\n        message: error.message,\r\n        stack: error.stack,\r\n      });\r\n      throw new Error(`Failed to extract audio: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const saveAudioToServer = async (audioBlob) => {\r\n    const formData = new FormData();\r\n    formData.append(\"audio\", audioBlob, \"extracted-audio.mp3\");\r\n\r\n    try {\r\n      setProcessingStatus(\"Uploading to server...\");\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/upload-and-summarize\",\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n          timeout: 60000, // 60 second timeout\r\n          onUploadProgress: (progressEvent) => {\r\n            const uploadProgress = Math.round(\r\n              (progressEvent.loaded * 100) / progressEvent.total\r\n            );\r\n            setConversionProgress(uploadProgress);\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.data.error) {\r\n        throw new Error(response.data.error);\r\n      }\r\n\r\n      setAudioUrl(null);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.code === \"ECONNABORTED\") {\r\n        throw new Error(\r\n          \"Request timed out. Please try again with a shorter video.\"\r\n        );\r\n      }\r\n      if (error.response) {\r\n        throw new Error(\r\n          `Server error: ${error.response.data.error || \"Unknown server error\"}`\r\n        );\r\n      } else if (error.request) {\r\n        throw new Error(\r\n          \"No response from server. Please check your connection.\"\r\n        );\r\n      } else {\r\n        throw new Error(`Upload failed: ${error.message}`);\r\n      }\r\n    } finally {\r\n      setProcessingStatus(\"\");\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    try {\r\n      if (!file) {\r\n        throw new Error(\"Please select a file to upload.\");\r\n      }\r\n\r\n      if (!ffmpegLoaded) {\r\n        throw new Error(\"Audio processor is not ready. Please wait.\");\r\n      }\r\n\r\n      setUploading(true);\r\n      setErrorMessage(\"\");\r\n\r\n      // Extract audio\r\n      setProcessingStatus(\"Extracting...\");\r\n      const audioBlob = await extractAudio(file);\r\n\r\n      // Upload and process\r\n      setProcessingStatus(\"Processing audio...\");\r\n      const result = await saveAudioToServer(audioBlob);\r\n\r\n      // Handle success\r\n      const url = URL.createObjectURL(audioBlob);\r\n      setAudioUrl(url);\r\n      setShowSuccess(true);\r\n      setTimeout(() => setShowSuccess(false), 5000);\r\n\r\n      // Show chatbot if summary is available\r\n      if (result.summary) {\r\n        setShowChatbot(true);\r\n        setChatHistory([\r\n          {\r\n            role: \"bot\",\r\n            content: `Here's a summary of your lecture: ${result.summary}`,\r\n          },\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Processing Error:\", error);\r\n      setErrorMessage(error.message);\r\n    } finally {\r\n      setUploading(false);\r\n      setConversionProgress(0);\r\n      setProcessingStatus(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <div className=\"container\">\r\n        <div className=\"lecture-summary\">\r\n          <h2>Lecture Summary</h2>\r\n          <h3>Upload your video to get an AI summary!</h3>\r\n        </div>\r\n\r\n        <div className=\"file-upload-container\">\r\n          <input\r\n            type=\"file\"\r\n            accept=\"video/mp4, video/webm, video/ogg\"\r\n            onChange={handleFileChange}\r\n          />\r\n          {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n          {file && (\r\n            <button\r\n              className=\"upload-button\"\r\n              onClick={handleUpload}\r\n              disabled={uploading}\r\n            >\r\n              {uploading ? \"Uploading...\" : \"Upload and Summarize\"}\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {processingStatus && (\r\n          <div className=\"processing-status\">\r\n            <p>{processingStatus}</p>\r\n            <progress value={conversionProgress} max=\"100\" />\r\n          </div>\r\n        )}\r\n\r\n        {showSuccess && (\r\n          <div className=\"success-message\">\r\n            <p>Audio extracted successfully!</p>\r\n          </div>\r\n        )}\r\n\r\n        {audioUrl && (\r\n          <div className=\"audio-player\">\r\n            <audio controls>\r\n              <source src={audioUrl} type=\"audio/mpeg\" />\r\n              Your browser does not support the audio element.\r\n            </audio>\r\n          </div>\r\n        )}\r\n\r\n        {showChatbot && (\r\n          <div className=\"chatbot-container\">\r\n            <div className=\"chat-history\">\r\n              {chatHistory.map((msg, idx) => (\r\n                <div key={idx} className={msg.role}>\r\n                  <p>{msg.content}</p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <form onSubmit={handleChatSubmit}>\r\n              <input\r\n                type=\"text\"\r\n                value={chatMessage}\r\n                onChange={(e) => setChatMessage(e.target.value)}\r\n                placeholder=\"Ask something...\"\r\n              />\r\n              <button type=\"submit\">Send</button>\r\n            </form>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}