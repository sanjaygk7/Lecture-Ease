{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rkama\\\\OneDrive\\\\Desktop\\\\FSD\\\\Mini-Project\\\\frontend\\\\src\\\\FileUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { FFmpeg } from \"@ffmpeg/ffmpeg\";\nimport { Link } from \"react-router-dom\";\nimport { fetchFile, toBlobURL } from \"@ffmpeg/util\";\nimport axios from \"axios\";\nimport \"./FileUpload.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_FILE_SIZE = 100 * 1024 * 1024; // 100MB\nconst ALLOWED_VIDEO_TYPES = [\"video/mp4\", \"video/webm\", \"video/ogg\"];\nconst FileUpload = () => {\n  _s();\n  const [ffmpeg] = useState(() => new FFmpeg());\n  const [file, setFile] = useState(null);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [ffmpegLoaded, setFfmpegLoaded] = useState(false);\n  const [conversionProgress, setConversionProgress] = useState(0);\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [chatHistory, setChatHistory] = useState([]);\n  const [processingStatus, setProcessingStatus] = useState(\"\");\n\n  // Load FFmpeg WebAssembly library\n  useEffect(() => {\n    const loadFFmpeg = async () => {\n      try {\n        await ffmpeg.load({\n          coreURL: await toBlobURL(\"https://unpkg.com/@ffmpeg/core@0.12.4/dist/umd/ffmpeg-core.js\", \"text/javascript\"),\n          wasmURL: await toBlobURL(\"https://unpkg.com/@ffmpeg/core@0.12.4/dist/umd/ffmpeg-core.wasm\", \"application/wasm\")\n        });\n        setFfmpegLoaded(true);\n      } catch (error) {\n        console.error(\"Error loading FFmpeg:\", error);\n        setErrorMessage(\"Error loading audio processor. Please try again.\");\n      }\n    };\n    loadFFmpeg();\n  }, [ffmpeg]);\n\n  // Cleanup URL object on component unmount\n  useEffect(() => {\n    return () => {\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    };\n  }, [audioUrl]);\n\n  // Validate file before uploading\n  const validateFile = useCallback(file => {\n    if (!file) {\n      throw new Error(\"Please select a file to upload.\");\n    }\n    if (!ALLOWED_VIDEO_TYPES.includes(file.type)) {\n      throw new Error(\"Please select a valid video file (MP4, WebM, or OGG).\");\n    }\n    if (file.size > MAX_FILE_SIZE) {\n      throw new Error(\"File size exceeds 100MB limit.\");\n    }\n  }, []);\n  const handleFileChange = useCallback(event => {\n    const selectedFile = event.target.files[0];\n    try {\n      validateFile(selectedFile);\n      setFile(selectedFile);\n      setErrorMessage(\"\");\n      setAudioUrl(null);\n      setShowSuccess(false);\n      setConversionProgress(0);\n      setChatHistory([]);\n    } catch (error) {\n      setErrorMessage(error.message);\n      setFile(null);\n    }\n  }, [validateFile]);\n  const extractAudio = async videoFile => {\n    try {\n      await ffmpeg.writeFile(\"input.mp4\", await fetchFile(videoFile));\n      ffmpeg.on(\"progress\", ({\n        progress\n      }) => {\n        setConversionProgress(Math.round(progress * 100));\n      });\n      await ffmpeg.exec([\"-i\", \"input.mp4\", \"-vn\", \"-acodec\", \"libmp3lame\", \"-ab\", \"128k\", \"-ar\", \"44100\", \"-y\", \"output.mp3\"]);\n      const data = await ffmpeg.readFile(\"output.mp3\");\n      const audioBlob = new Blob([data.buffer], {\n        type: \"audio/mpeg\"\n      });\n      await ffmpeg.deleteFile(\"input.mp4\");\n      await ffmpeg.deleteFile(\"output.mp3\");\n      return audioBlob;\n    } catch (error) {\n      console.error(\"Audio extraction error:\", error);\n      throw new Error(\"Failed to extract audio.\");\n    }\n  };\n  const saveAudioToServer = async audioBlob => {\n    const formData = new FormData();\n    formData.append(\"audio\", audioBlob, \"extracted-audio.mp3\");\n    try {\n      setProcessingStatus(\"Uploading...\");\n      const response = await axios.post(\"http://localhost:5000/api/upload-and-summarize\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        timeout: 60000\n      });\n      if (response.data.error) {\n        throw new Error(response.data.error);\n      }\n      setAudioUrl(null);\n      return response.data;\n    } catch (error) {\n      throw new Error(\"Failed to upload audio. Please try again.\");\n    } finally {\n      setProcessingStatus(\"\");\n    }\n  };\n  const handleUpload = async () => {\n    try {\n      if (!file) throw new Error(\"Please select a file to upload.\");\n      if (!ffmpegLoaded) throw new Error(\"Audio processor not ready.\");\n      setUploading(true);\n      setErrorMessage(\"\");\n      const audioBlob = await extractAudio(file);\n      const result = await saveAudioToServer(audioBlob);\n      const url = URL.createObjectURL(audioBlob);\n      setAudioUrl(url);\n      setShowSuccess(true);\n      if (result.summary) {\n        setChatHistory([{\n          role: \"bot\",\n          content: `Summary: ${result.summary}`\n        }]);\n      }\n    } catch (error) {\n      console.error(\"Upload Error:\", error);\n      setErrorMessage(error.message);\n    } finally {\n      setUploading(false);\n    }\n  };\n  const handleChatSubmit = async e => {\n    e.preventDefault();\n    if (!chatMessage.trim()) return;\n    const userMessage = chatMessage.trim();\n    setChatHistory(prev => [...prev, {\n      role: \"user\",\n      content: userMessage\n    }]);\n    setChatMessage(\"\");\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/gemini-chat\", {\n        userMessage\n      });\n      const botReply = response.data.response || \"No response received from Gemini.\";\n      setChatHistory(prev => [...prev, {\n        role: \"bot\",\n        content: botReply\n      }]);\n    } catch (error) {\n      console.error(\"Chat Error:\", error);\n      setChatHistory(prev => [...prev, {\n        role: \"bot\",\n        content: \"Error connecting to Gemini AI.\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-upload\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        accept: ALLOWED_VIDEO_TYPES.join(\",\"),\n        disabled: uploading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        disabled: !file || uploading || !ffmpegLoaded,\n        children: uploading ? \"Processing...\" : \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 24\n    }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      src: audioUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 20\n    }, this), chatHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-${msg.role}`,\n        children: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleChatSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: chatMessage,\n          onChange: e => setChatMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"5ZWPTyp8a/KxvsW9McoAfyYfrkk=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","FFmpeg","Link","fetchFile","toBlobURL","axios","jsxDEV","_jsxDEV","MAX_FILE_SIZE","ALLOWED_VIDEO_TYPES","FileUpload","_s","ffmpeg","file","setFile","audioUrl","setAudioUrl","uploading","setUploading","errorMessage","setErrorMessage","showSuccess","setShowSuccess","ffmpegLoaded","setFfmpegLoaded","conversionProgress","setConversionProgress","chatMessage","setChatMessage","chatHistory","setChatHistory","processingStatus","setProcessingStatus","loadFFmpeg","load","coreURL","wasmURL","error","console","URL","revokeObjectURL","validateFile","Error","includes","type","size","handleFileChange","event","selectedFile","target","files","message","extractAudio","videoFile","writeFile","on","progress","Math","round","exec","data","readFile","audioBlob","Blob","buffer","deleteFile","saveAudioToServer","formData","FormData","append","response","post","headers","timeout","handleUpload","result","url","createObjectURL","summary","role","content","handleChatSubmit","e","preventDefault","trim","userMessage","prev","botReply","className","children","onChange","accept","join","disabled","fileName","_jsxFileName","lineNumber","columnNumber","onClick","controls","src","length","map","msg","index","onSubmit","value","_c","$RefreshReg$"],"sources":["C:/Users/rkama/OneDrive/Desktop/FSD/Mini-Project/frontend/src/FileUpload.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { FFmpeg } from \"@ffmpeg/ffmpeg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { fetchFile, toBlobURL } from \"@ffmpeg/util\";\r\nimport axios from \"axios\";\r\nimport \"./FileUpload.css\";\r\n\r\nconst MAX_FILE_SIZE = 100 * 1024 * 1024; // 100MB\r\nconst ALLOWED_VIDEO_TYPES = [\"video/mp4\", \"video/webm\", \"video/ogg\"];\r\n\r\nconst FileUpload = () => {\r\n  const [ffmpeg] = useState(() => new FFmpeg());\r\n  const [file, setFile] = useState(null);\r\n  const [audioUrl, setAudioUrl] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n  const [ffmpegLoaded, setFfmpegLoaded] = useState(false);\r\n  const [conversionProgress, setConversionProgress] = useState(0);\r\n  const [chatMessage, setChatMessage] = useState(\"\");\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [processingStatus, setProcessingStatus] = useState(\"\");\r\n\r\n  // Load FFmpeg WebAssembly library\r\n  useEffect(() => {\r\n    const loadFFmpeg = async () => {\r\n      try {\r\n        await ffmpeg.load({\r\n          coreURL: await toBlobURL(\r\n            \"https://unpkg.com/@ffmpeg/core@0.12.4/dist/umd/ffmpeg-core.js\",\r\n            \"text/javascript\"\r\n          ),\r\n          wasmURL: await toBlobURL(\r\n            \"https://unpkg.com/@ffmpeg/core@0.12.4/dist/umd/ffmpeg-core.wasm\",\r\n            \"application/wasm\"\r\n          ),\r\n        });\r\n        setFfmpegLoaded(true);\r\n      } catch (error) {\r\n        console.error(\"Error loading FFmpeg:\", error);\r\n        setErrorMessage(\"Error loading audio processor. Please try again.\");\r\n      }\r\n    };\r\n    loadFFmpeg();\r\n  }, [ffmpeg]);\r\n\r\n  // Cleanup URL object on component unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (audioUrl) {\r\n        URL.revokeObjectURL(audioUrl);\r\n      }\r\n    };\r\n  }, [audioUrl]);\r\n\r\n  // Validate file before uploading\r\n  const validateFile = useCallback((file) => {\r\n    if (!file) {\r\n      throw new Error(\"Please select a file to upload.\");\r\n    }\r\n\r\n    if (!ALLOWED_VIDEO_TYPES.includes(file.type)) {\r\n      throw new Error(\"Please select a valid video file (MP4, WebM, or OGG).\");\r\n    }\r\n\r\n    if (file.size > MAX_FILE_SIZE) {\r\n      throw new Error(\"File size exceeds 100MB limit.\");\r\n    }\r\n  }, []);\r\n\r\n  const handleFileChange = useCallback(\r\n    (event) => {\r\n      const selectedFile = event.target.files[0];\r\n      try {\r\n        validateFile(selectedFile);\r\n        setFile(selectedFile);\r\n        setErrorMessage(\"\");\r\n        setAudioUrl(null);\r\n        setShowSuccess(false);\r\n        setConversionProgress(0);\r\n        setChatHistory([]);\r\n      } catch (error) {\r\n        setErrorMessage(error.message);\r\n        setFile(null);\r\n      }\r\n    },\r\n    [validateFile]\r\n  );\r\n\r\n  const extractAudio = async (videoFile) => {\r\n    try {\r\n      await ffmpeg.writeFile(\"input.mp4\", await fetchFile(videoFile));\r\n\r\n      ffmpeg.on(\"progress\", ({ progress }) => {\r\n        setConversionProgress(Math.round(progress * 100));\r\n      });\r\n\r\n      await ffmpeg.exec([\r\n        \"-i\",\r\n        \"input.mp4\",\r\n        \"-vn\",\r\n        \"-acodec\",\r\n        \"libmp3lame\",\r\n        \"-ab\",\r\n        \"128k\",\r\n        \"-ar\",\r\n        \"44100\",\r\n        \"-y\",\r\n        \"output.mp3\",\r\n      ]);\r\n\r\n      const data = await ffmpeg.readFile(\"output.mp3\");\r\n      const audioBlob = new Blob([data.buffer], { type: \"audio/mpeg\" });\r\n\r\n      await ffmpeg.deleteFile(\"input.mp4\");\r\n      await ffmpeg.deleteFile(\"output.mp3\");\r\n\r\n      return audioBlob;\r\n    } catch (error) {\r\n      console.error(\"Audio extraction error:\", error);\r\n      throw new Error(\"Failed to extract audio.\");\r\n    }\r\n  };\r\n\r\n  const saveAudioToServer = async (audioBlob) => {\r\n    const formData = new FormData();\r\n    formData.append(\"audio\", audioBlob, \"extracted-audio.mp3\");\r\n\r\n    try {\r\n      setProcessingStatus(\"Uploading...\");\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/upload-and-summarize\",\r\n        formData,\r\n        {\r\n          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n          timeout: 60000,\r\n        }\r\n      );\r\n\r\n      if (response.data.error) {\r\n        throw new Error(response.data.error);\r\n      }\r\n\r\n      setAudioUrl(null);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(\"Failed to upload audio. Please try again.\");\r\n    } finally {\r\n      setProcessingStatus(\"\");\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    try {\r\n      if (!file) throw new Error(\"Please select a file to upload.\");\r\n      if (!ffmpegLoaded) throw new Error(\"Audio processor not ready.\");\r\n\r\n      setUploading(true);\r\n      setErrorMessage(\"\");\r\n\r\n      const audioBlob = await extractAudio(file);\r\n      const result = await saveAudioToServer(audioBlob);\r\n\r\n      const url = URL.createObjectURL(audioBlob);\r\n      setAudioUrl(url);\r\n      setShowSuccess(true);\r\n\r\n      if (result.summary) {\r\n        setChatHistory([\r\n          { role: \"bot\", content: `Summary: ${result.summary}` },\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload Error:\", error);\r\n      setErrorMessage(error.message);\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const handleChatSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!chatMessage.trim()) return;\r\n\r\n    const userMessage = chatMessage.trim();\r\n    setChatHistory((prev) => [...prev, { role: \"user\", content: userMessage }]);\r\n    setChatMessage(\"\");\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/gemini-chat\",\r\n        {\r\n          userMessage,\r\n        }\r\n      );\r\n      const botReply =\r\n        response.data.response || \"No response received from Gemini.\";\r\n      setChatHistory((prev) => [...prev, { role: \"bot\", content: botReply }]);\r\n    } catch (error) {\r\n      console.error(\"Chat Error:\", error);\r\n      setChatHistory((prev) => [\r\n        ...prev,\r\n        { role: \"bot\", content: \"Error connecting to Gemini AI.\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"file-upload\">\r\n      <div className=\"upload-container\">\r\n        <input\r\n          type=\"file\"\r\n          onChange={handleFileChange}\r\n          accept={ALLOWED_VIDEO_TYPES.join(\",\")}\r\n          disabled={uploading}\r\n        />\r\n        <button\r\n          onClick={handleUpload}\r\n          disabled={!file || uploading || !ffmpegLoaded}\r\n        >\r\n          {uploading ? \"Processing...\" : \"Upload\"}\r\n        </button>\r\n      </div>\r\n      {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n      {audioUrl && <audio controls src={audioUrl} />}\r\n      {chatHistory.length > 0 && (\r\n        <div className=\"chat-container\">\r\n          {chatHistory.map((msg, index) => (\r\n            <div key={index} className={`chat-${msg.role}`}>\r\n              {msg.content}\r\n            </div>\r\n          ))}\r\n          <form onSubmit={handleChatSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              value={chatMessage}\r\n              onChange={(e) => setChatMessage(e.target.value)}\r\n            />\r\n            <button type=\"submit\">Send</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}