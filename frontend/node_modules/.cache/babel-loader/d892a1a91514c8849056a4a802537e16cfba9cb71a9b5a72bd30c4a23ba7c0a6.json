{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\Mini-Project\\\\frontend\\\\src\\\\FileUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { FFmpeg } from '@ffmpeg/ffmpeg';\nimport { Link } from 'react-router-dom';\nimport { fetchFile, toBlobURL } from '@ffmpeg/util';\nimport axios from 'axios';\nimport './FileUpload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_FILE_SIZE = 100 * 1024 * 1024; // 100MB\nconst ALLOWED_VIDEO_TYPES = ['video/mp4', 'video/webm', 'video/ogg'];\nconst FileUpload = () => {\n  _s();\n  const [ffmpeg] = useState(() => new FFmpeg());\n  const [file, setFile] = useState(null);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [ffmpegLoaded, setFfmpegLoaded] = useState(false);\n  const [conversionProgress, setConversionProgress] = useState(0);\n  const [showChatbot, setShowChatbot] = useState(false);\n  const [chatMessage, setChatMessage] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [processingStatus, setProcessingStatus] = useState('');\n\n  // Load FFmpeg WebAssembly library\n  useEffect(() => {\n    const loadFFmpeg = async () => {\n      try {\n        await ffmpeg.load({\n          coreURL: await toBlobURL('https://unpkg.com/@ffmpeg/core@0.12.4/dist/umd/ffmpeg-core.js', 'text/javascript'),\n          wasmURL: await toBlobURL('https://unpkg.com/@ffmpeg/core@0.12.4/dist/umd/ffmpeg-core.wasm', 'application/wasm')\n        });\n        setFfmpegLoaded(true);\n      } catch (error) {\n        console.error('Error loading FFmpeg:', error);\n        setErrorMessage('Error loading audio processor. Please try again.');\n      }\n    };\n    loadFFmpeg();\n  }, [ffmpeg]);\n  useEffect(() => {\n    return () => {\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    };\n  }, [audioUrl]);\n  const validateFile = useCallback(file => {\n    if (!file) {\n      throw new Error('Please select a file to upload.');\n    }\n    if (!ALLOWED_VIDEO_TYPES.includes(file.type)) {\n      throw new Error('Please select a valid video file (MP4, WebM, or OGG).');\n    }\n    if (file.size > MAX_FILE_SIZE) {\n      throw new Error('File size exceeds 100MB limit.');\n    }\n  }, []);\n  const handleFileChange = useCallback(event => {\n    const selectedFile = event.target.files[0];\n    try {\n      validateFile(selectedFile);\n      setFile(selectedFile);\n      setErrorMessage('');\n      setAudioUrl(null);\n      setShowSuccess(false);\n      setConversionProgress(0);\n      setShowChatbot(false);\n      setChatHistory([]);\n    } catch (error) {\n      setErrorMessage(error.message);\n      setFile(null);\n    }\n  }, [validateFile]);\n  const handleChatSubmit = async e => {\n    e.preventDefault();\n    if (!chatMessage.trim()) return;\n    const userMessage = chatMessage.trim();\n    setChatHistory(prev => [...prev, {\n      role: 'user',\n      content: userMessage\n    }]);\n    setChatMessage('');\n    try {\n      // Make the API request to the backend, which will forward it to Gemini AI\n      const response = await axios.post('http://localhost:5000/api/chat', {\n        userMessage\n      });\n\n      // Handle the response from Gemini AI\n      setChatHistory(prev => [...prev, {\n        role: 'bot',\n        content: response.data.reply || 'No response received from Gemini.'\n      }]);\n    } catch (error) {\n      console.error(\"Error in Gemini API:\", error);\n      setChatHistory(prev => [...prev, {\n        role: 'bot',\n        content: 'Sorry, I encountered an error while connecting to Gemini.'\n      }]);\n    }\n  };\n  const extractAudio = async videoFile => {\n    try {\n      console.log('Starting audio extraction from video:', {\n        fileName: videoFile.name,\n        fileType: videoFile.type,\n        fileSize: videoFile.size\n      });\n\n      // Write video file to FFmpeg\n      console.log('Writing video file to FFmpeg...');\n      await ffmpeg.writeFile('input.mp4', await fetchFile(videoFile));\n      console.log('Video file written successfully');\n\n      // Log FFmpeg version and configuration\n      const ffmpegVersion = await ffmpeg.exec(['-version']);\n      console.log('FFmpeg version:', ffmpegVersion);\n\n      // Set up progress monitoring\n      ffmpeg.on('progress', ({\n        progress,\n        time\n      }) => {\n        console.log('Extraction progress:', {\n          progress: Math.round(progress * 100),\n          timeMs: time\n        });\n        setConversionProgress(Math.round(progress * 100));\n      });\n\n      // Extract audio with more detailed parameters\n      console.log('Starting audio extraction...');\n      await ffmpeg.exec(['-i', 'input.mp4', '-vn',\n      // No video\n      '-acodec', 'libmp3lame',\n      // MP3 codec\n      '-ab', '128k',\n      // Bitrate\n      '-ar', '44100',\n      // Sample rate\n      '-y',\n      // Overwrite output\n      'output.mp3']);\n      console.log('Audio extraction completed');\n\n      // Read the output file\n      console.log('Reading extracted audio file...');\n      const data = await ffmpeg.readFile('output.mp3');\n      console.log('Audio file read, size:', data.buffer.byteLength);\n\n      // Create audio blob with explicit type\n      const audioBlob = new Blob([data.buffer], {\n        type: 'audio/mpeg'\n      });\n      console.log('Audio blob created, size:', audioBlob.size);\n\n      // Clean up files\n      console.log('Cleaning up temporary files...');\n      await ffmpeg.deleteFile('input.mp4');\n      await ffmpeg.deleteFile('output.mp3');\n      console.log('Temporary files deleted');\n      return audioBlob;\n    } catch (error) {\n      console.error('Audio extraction error:', {\n        message: error.message,\n        stack: error.stack\n      });\n      throw new Error(`Failed to extract audio: ${error.message}`);\n    }\n  };\n  const saveAudioToServer = async audioBlob => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'extracted-audio.mp3');\n    try {\n      setProcessingStatus('Uploading to server...');\n      const response = await axios.post('http://localhost:5000/api/upload-and-summarize', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 60000,\n        // 60 second timeout\n        onUploadProgress: progressEvent => {\n          const uploadProgress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          setConversionProgress(uploadProgress);\n        }\n      });\n      if (response.data.error) {\n        throw new Error(response.data.error);\n      }\n      setAudioUrl(null);\n      return response.data;\n    } catch (error) {\n      if (error.code === 'ECONNABORTED') {\n        throw new Error('Request timed out. Please try again with a shorter video.');\n      }\n      if (error.response) {\n        throw new Error(`Server error: ${error.response.data.error || 'Unknown server error'}`);\n      } else if (error.request) {\n        throw new Error('No response from server. Please check your connection.');\n      } else {\n        throw new Error(`Upload failed: ${error.message}`);\n      }\n    } finally {\n      setProcessingStatus('');\n    }\n  };\n  const handleUpload = async () => {\n    try {\n      if (!file) {\n        throw new Error('Please select a file to upload.');\n      }\n      if (!ffmpegLoaded) {\n        throw new Error('Audio processor is not ready. Please wait.');\n      }\n      setUploading(true);\n      setErrorMessage('');\n\n      // Extract audio\n      setProcessingStatus('Extracting...');\n      const audioBlob = await extractAudio(file);\n\n      // Upload and process\n      setProcessingStatus('Processing audio...');\n      const result = await saveAudioToServer(audioBlob);\n\n      // Handle success\n      const url = URL.createObjectURL(audioBlob);\n      setAudioUrl(url);\n      setShowSuccess(true);\n      setTimeout(() => setShowSuccess(false), 5000);\n\n      // Show chatbot if summary is available\n      if (result.summary) {\n        setShowChatbot(true);\n        setChatHistory([{\n          role: 'bot',\n          content: `Here's a summary of your lecture: ${result.summary}`\n        }]);\n      }\n    } catch (error) {\n      console.error('Processing Error:', error);\n      setErrorMessage(error.message);\n    } finally {\n      setUploading(false);\n      setConversionProgress(0);\n      setProcessingStatus('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lectureEase\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-4xl font-bold mb-4\",\n            children: \"LectureEase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"bg-white text-blue-500 font-bold py-2 px-4 rounded\",\n          children: \"Signout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"headd\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Upload Your Lecture Video Here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileChange,\n          accept: ALLOWED_VIDEO_TYPES.join(','),\n          className: \"file-input\",\n          disabled: uploading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUpload,\n          disabled: !file || uploading || !ffmpegLoaded,\n          className: \"choosefile\",\n          children: uploading ? 'Processing...' : 'Upload'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), processingStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this), processingStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this), conversionProgress > 0 && conversionProgress < 100 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-fill\",\n            style: {\n              width: `${conversionProgress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"progress-text\",\n          children: [uploading ? 'Uploading' : 'Converting', \": \", conversionProgress, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this), showSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: \"Video successfully uploaded!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            viewBox: \"0 0 24 24\",\n            fill: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              fillRule: \"evenodd\",\n              d: \"M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25zm0 17.25c-4.365 0-7.5-3.135-7.5-7.5s3.135-7.5 7.5-7.5 7.5 3.135 7.5 7.5-3.135 7.5-7.5 7.5z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this), errorMessage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this), showChatbot && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-container mt-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbox-messages\",\n          children: chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.role}`,\n            children: message.content\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleChatSubmit,\n          className: \"chatbox-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: chatMessage,\n            onChange: e => setChatMessage(e.target.value),\n            placeholder: \"Ask a question about your lecture...\",\n            className: \"flex-grow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"yRYvK/TjzxKbEsrHUxch6UTf2wY=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","FFmpeg","Link","fetchFile","toBlobURL","axios","jsxDEV","_jsxDEV","MAX_FILE_SIZE","ALLOWED_VIDEO_TYPES","FileUpload","_s","ffmpeg","file","setFile","audioUrl","setAudioUrl","uploading","setUploading","errorMessage","setErrorMessage","showSuccess","setShowSuccess","ffmpegLoaded","setFfmpegLoaded","conversionProgress","setConversionProgress","showChatbot","setShowChatbot","chatMessage","setChatMessage","chatHistory","setChatHistory","processingStatus","setProcessingStatus","loadFFmpeg","load","coreURL","wasmURL","error","console","URL","revokeObjectURL","validateFile","Error","includes","type","size","handleFileChange","event","selectedFile","target","files","message","handleChatSubmit","e","preventDefault","trim","userMessage","prev","role","content","response","post","data","reply","extractAudio","videoFile","log","fileName","name","fileType","fileSize","writeFile","ffmpegVersion","exec","on","progress","time","Math","round","timeMs","readFile","buffer","byteLength","audioBlob","Blob","deleteFile","stack","saveAudioToServer","formData","FormData","append","headers","timeout","onUploadProgress","progressEvent","uploadProgress","loaded","total","code","request","handleUpload","result","url","createObjectURL","setTimeout","summary","className","children","to","_jsxFileName","lineNumber","columnNumber","onChange","accept","join","disabled","onClick","style","width","viewBox","fill","fillRule","d","map","index","onSubmit","value","placeholder","_c","$RefreshReg$"],"sources":["D:/Project/Mini-Project/frontend/src/FileUpload.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { FFmpeg } from '@ffmpeg/ffmpeg';\r\nimport { Link } from 'react-router-dom';\r\nimport { fetchFile, toBlobURL } from '@ffmpeg/util';\r\nimport axios from 'axios';\r\nimport './FileUpload.css';\r\n\r\nconst MAX_FILE_SIZE = 100 * 1024 * 1024; // 100MB\r\nconst ALLOWED_VIDEO_TYPES = ['video/mp4', 'video/webm', 'video/ogg'];\r\n\r\nconst FileUpload = () => {\r\n  const [ffmpeg] = useState(() => new FFmpeg());\r\n  const [file, setFile] = useState(null);\r\n  const [audioUrl, setAudioUrl] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n  const [ffmpegLoaded, setFfmpegLoaded] = useState(false);\r\n  const [conversionProgress, setConversionProgress] = useState(0);\r\n  const [showChatbot, setShowChatbot] = useState(false);\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [processingStatus, setProcessingStatus] = useState('');\r\n\r\n  // Load FFmpeg WebAssembly library\r\n  useEffect(() => {\r\n    const loadFFmpeg = async () => {\r\n      try {\r\n        await ffmpeg.load({\r\n          coreURL: await toBlobURL(\r\n            'https://unpkg.com/@ffmpeg/core@0.12.4/dist/umd/ffmpeg-core.js',\r\n            'text/javascript'\r\n          ),\r\n          wasmURL: await toBlobURL(\r\n            'https://unpkg.com/@ffmpeg/core@0.12.4/dist/umd/ffmpeg-core.wasm',\r\n            'application/wasm'\r\n          ),\r\n        });\r\n        setFfmpegLoaded(true);\r\n      } catch (error) {\r\n        console.error('Error loading FFmpeg:', error);\r\n        setErrorMessage('Error loading audio processor. Please try again.');\r\n      }\r\n    };\r\n    loadFFmpeg();\r\n  }, [ffmpeg]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (audioUrl) {\r\n        URL.revokeObjectURL(audioUrl);\r\n      }\r\n    };\r\n  }, [audioUrl]);\r\n\r\n  const validateFile = useCallback((file) => {\r\n    if (!file) {\r\n      throw new Error('Please select a file to upload.');\r\n    }\r\n\r\n    if (!ALLOWED_VIDEO_TYPES.includes(file.type)) {\r\n      throw new Error('Please select a valid video file (MP4, WebM, or OGG).');\r\n    }\r\n\r\n    if (file.size > MAX_FILE_SIZE) {\r\n      throw new Error('File size exceeds 100MB limit.');\r\n    }\r\n  }, []);\r\n\r\n  const handleFileChange = useCallback((event) => {\r\n    const selectedFile = event.target.files[0];\r\n    try {\r\n      validateFile(selectedFile);\r\n      setFile(selectedFile);\r\n      setErrorMessage('');\r\n      setAudioUrl(null);\r\n      setShowSuccess(false);\r\n      setConversionProgress(0);\r\n      setShowChatbot(false);\r\n      setChatHistory([]);\r\n    } catch (error) {\r\n      setErrorMessage(error.message);\r\n      setFile(null);\r\n    }\r\n  }, [validateFile]);\r\n\r\n  const handleChatSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!chatMessage.trim()) return;\r\n    const userMessage = chatMessage.trim();\r\n    setChatHistory((prev) => [...prev, { role: 'user', content: userMessage }]);\r\n    setChatMessage('');\r\n    try {\r\n      // Make the API request to the backend, which will forward it to Gemini AI\r\n      const response = await axios.post('http://localhost:5000/api/chat', { userMessage });\r\n\r\n      // Handle the response from Gemini AI\r\n      setChatHistory((prev) => [\r\n        ...prev,\r\n        { role: 'bot', content: response.data.reply || 'No response received from Gemini.' }\r\n      ]);\r\n    } catch (error) {\r\n      console.error(\"Error in Gemini API:\", error);\r\n      setChatHistory((prev) => [\r\n        ...prev,\r\n        { role: 'bot', content: 'Sorry, I encountered an error while connecting to Gemini.' }\r\n      ]);\r\n    }\r\n  };\r\n\r\n\r\n  const extractAudio = async (videoFile) => {\r\n    try {\r\n      console.log('Starting audio extraction from video:', {\r\n        fileName: videoFile.name,\r\n        fileType: videoFile.type,\r\n        fileSize: videoFile.size\r\n      });\r\n\r\n      // Write video file to FFmpeg\r\n      console.log('Writing video file to FFmpeg...');\r\n      await ffmpeg.writeFile('input.mp4', await fetchFile(videoFile));\r\n      console.log('Video file written successfully');\r\n\r\n      // Log FFmpeg version and configuration\r\n      const ffmpegVersion = await ffmpeg.exec(['-version']);\r\n      console.log('FFmpeg version:', ffmpegVersion);\r\n\r\n      // Set up progress monitoring\r\n      ffmpeg.on('progress', ({ progress, time }) => {\r\n        console.log('Extraction progress:', {\r\n          progress: Math.round(progress * 100),\r\n          timeMs: time\r\n        });\r\n        setConversionProgress(Math.round(progress * 100));\r\n      });\r\n\r\n      // Extract audio with more detailed parameters\r\n      console.log('Starting audio extraction...');\r\n      await ffmpeg.exec([\r\n        '-i', 'input.mp4',\r\n        '-vn',                    // No video\r\n        '-acodec', 'libmp3lame', // MP3 codec\r\n        '-ab', '128k',           // Bitrate\r\n        '-ar', '44100',          // Sample rate\r\n        '-y',                    // Overwrite output\r\n        'output.mp3'\r\n      ]);\r\n      console.log('Audio extraction completed');\r\n\r\n      // Read the output file\r\n      console.log('Reading extracted audio file...');\r\n      const data = await ffmpeg.readFile('output.mp3');\r\n      console.log('Audio file read, size:', data.buffer.byteLength);\r\n\r\n      // Create audio blob with explicit type\r\n      const audioBlob = new Blob([data.buffer], {\r\n        type: 'audio/mpeg'\r\n      });\r\n      console.log('Audio blob created, size:', audioBlob.size);\r\n\r\n      // Clean up files\r\n      console.log('Cleaning up temporary files...');\r\n      await ffmpeg.deleteFile('input.mp4');\r\n      await ffmpeg.deleteFile('output.mp3');\r\n      console.log('Temporary files deleted');\r\n\r\n      return audioBlob;\r\n    } catch (error) {\r\n      console.error('Audio extraction error:', {\r\n        message: error.message,\r\n        stack: error.stack\r\n      });\r\n      throw new Error(`Failed to extract audio: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const saveAudioToServer = async (audioBlob) => {\r\n    const formData = new FormData();\r\n    formData.append('audio', audioBlob, 'extracted-audio.mp3');\r\n\r\n    try {\r\n      setProcessingStatus('Uploading to server...');\r\n      const response = await axios.post('http://localhost:5000/api/upload-and-summarize', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        timeout: 60000, // 60 second timeout\r\n        onUploadProgress: (progressEvent) => {\r\n          const uploadProgress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n          setConversionProgress(uploadProgress);\r\n        },\r\n      });\r\n\r\n      if (response.data.error) {\r\n        throw new Error(response.data.error);\r\n      }\r\n\r\n      setAudioUrl(null);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.code === 'ECONNABORTED') {\r\n        throw new Error('Request timed out. Please try again with a shorter video.');\r\n      }\r\n      if (error.response) {\r\n        throw new Error(`Server error: ${error.response.data.error || 'Unknown server error'}`);\r\n      } else if (error.request) {\r\n        throw new Error('No response from server. Please check your connection.');\r\n      } else {\r\n        throw new Error(`Upload failed: ${error.message}`);\r\n      }\r\n    } finally {\r\n      setProcessingStatus('');\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    try {\r\n      if (!file) {\r\n        throw new Error('Please select a file to upload.');\r\n      }\r\n\r\n      if (!ffmpegLoaded) {\r\n        throw new Error('Audio processor is not ready. Please wait.');\r\n      }\r\n\r\n      setUploading(true);\r\n      setErrorMessage('');\r\n\r\n      // Extract audio\r\n      setProcessingStatus('Extracting...');\r\n      const audioBlob = await extractAudio(file);\r\n\r\n      // Upload and process\r\n      setProcessingStatus('Processing audio...');\r\n      const result = await saveAudioToServer(audioBlob);\r\n\r\n      // Handle success\r\n      const url = URL.createObjectURL(audioBlob);\r\n      setAudioUrl(url);\r\n      setShowSuccess(true);\r\n      setTimeout(() => setShowSuccess(false), 5000);\r\n\r\n      // Show chatbot if summary is available\r\n      if (result.summary) {\r\n        setShowChatbot(true);\r\n        setChatHistory([{\r\n          role: 'bot',\r\n          content: `Here's a summary of your lecture: ${result.summary}`\r\n        }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Processing Error:', error);\r\n      setErrorMessage(error.message);\r\n    } finally {\r\n      setUploading(false);\r\n      setConversionProgress(0);\r\n      setProcessingStatus('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <div className=\"container\">\r\n        <div className=\"lectureEase\">\r\n          <Link to=\"/\">\r\n            <h1 className=\"text-4xl font-bold mb-4\">LectureEase</h1>\r\n          </Link>\r\n        </div>\r\n\r\n        <div className=\"login\">\r\n          <Link to=\"/\" className=\"bg-white text-blue-500 font-bold py-2 px-4 rounded\">\r\n            Signout\r\n          </Link>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"file-upload\">\r\n        <div className=\"headd\">\r\n          <span>Upload Your Lecture Video Here</span>\r\n        </div>\r\n\r\n        <div className=\"upload-container\">\r\n          <input\r\n            type=\"file\"\r\n            onChange={handleFileChange}\r\n            accept={ALLOWED_VIDEO_TYPES.join(',')}\r\n            className=\"file-input\"\r\n            disabled={uploading}\r\n          />\r\n          <button\r\n            onClick={handleUpload}\r\n            disabled={!file || uploading || !ffmpegLoaded}\r\n            className=\"choosefile\"\r\n          >\r\n            {uploading ? 'Processing...' : 'Upload'}\r\n          </button>\r\n        </div>\r\n\r\n        {processingStatus && (\r\n          <div className=\"status-message\">\r\n            <div className=\"spinner\"></div>\r\n            {processingStatus}\r\n          </div>\r\n        )}\r\n\r\n        {conversionProgress > 0 && conversionProgress < 100 && (\r\n          <div className=\"progress-container\">\r\n            <div className=\"progress-bar\">\r\n              <div\r\n                className=\"progress-fill\"\r\n                style={{ width: `${conversionProgress}%` }}\r\n              />\r\n            </div>\r\n            <p className=\"progress-text\">\r\n              {uploading ? 'Uploading' : 'Converting'}: {conversionProgress}%\r\n            </p>\r\n          </div>\r\n        )}\r\n\r\n        {showSuccess && (\r\n          <div className=\"success-message\">\r\n            Video successfully uploaded!\r\n          </div>\r\n        )}\r\n\r\n        {errorMessage && (\r\n          <div className=\"error-container\">\r\n            <div className=\"error-message\">\r\n              <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                <path fillRule=\"evenodd\" d=\"M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25zm0 17.25c-4.365 0-7.5-3.135-7.5-7.5s3.135-7.5 7.5-7.5 7.5 3.135 7.5 7.5-3.135 7.5-7.5 7.5z\" />\r\n              </svg>\r\n              {errorMessage}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {showChatbot && (\r\n          <div className=\"chatbot-container mt-6\">\r\n            <div className=\"chatbox-messages\">\r\n              {chatHistory.map((message, index) => (\r\n                <div key={index} className={`message ${message.role}`}>\r\n                  {message.content}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <form onSubmit={handleChatSubmit} className=\"chatbox-input\">\r\n              <input\r\n                type=\"text\"\r\n                value={chatMessage}\r\n                onChange={(e) => setChatMessage(e.target.value)}\r\n                placeholder=\"Ask a question about your lecture...\"\r\n                className=\"flex-grow\"\r\n              />\r\n              <button type=\"submit\">Send</button>\r\n            </form>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}