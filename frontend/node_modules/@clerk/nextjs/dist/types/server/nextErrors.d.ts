/**
 * Clerk's identifiers that are used alongside the ones from Next.js
 */
declare const CONTROL_FLOW_ERROR: {
    FORCE_NOT_FOUND: string;
    REDIRECT_TO_URL: string;
    REDIRECT_TO_SIGN_IN: string;
};
/**
 * In-house implementation of `notFound()`
 * https://github.com/vercel/next.js/blob/canary/packages/next/src/client/components/not-found.ts
 */
declare const NOT_FOUND_ERROR_CODE = "NEXT_NOT_FOUND";
type NotFoundError = Error & {
    digest: typeof NOT_FOUND_ERROR_CODE;
    clerk_digest: typeof CONTROL_FLOW_ERROR.FORCE_NOT_FOUND;
};
declare function isNextjsNotFoundError(error: unknown): error is NotFoundError;
declare function nextjsNotFound(): never;
/**
 * In-house implementation of `redirect()`
 * https://github.com/vercel/next.js/blob/canary/packages/next/src/client/components/redirect.ts
 */
declare const REDIRECT_ERROR_CODE = "NEXT_REDIRECT";
type RedirectError<T = unknown> = Error & {
    digest: `${typeof REDIRECT_ERROR_CODE};${'replace'};${string};${307};`;
    clerk_digest: typeof CONTROL_FLOW_ERROR.REDIRECT_TO_URL | typeof CONTROL_FLOW_ERROR.REDIRECT_TO_SIGN_IN;
} & T;
declare function nextjsRedirectError(url: string, extra: Record<string, unknown>, type?: 'replace', statusCode?: 307): never;
declare function redirectToSignInError(url: string, returnBackUrl?: string | URL | null): never;
/**
 * Checks an error to determine if it's an error generated by the
 * `redirect(url)` helper.
 *
 * @param error the error that may reference a redirect error
 * @returns true if the error is a redirect error
 */
declare function isNextjsRedirectError(error: unknown): error is RedirectError<{
    redirectUrl: string | URL;
}>;
declare function isRedirectToSignInError(error: unknown): error is RedirectError<{
    returnBackUrl: string | URL;
}>;
export { isNextjsNotFoundError, nextjsNotFound, redirectToSignInError, nextjsRedirectError, isNextjsRedirectError, isRedirectToSignInError, };
//# sourceMappingURL=nextErrors.d.ts.map