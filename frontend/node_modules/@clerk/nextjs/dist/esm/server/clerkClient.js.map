{"version":3,"sources":["../../../src/server/clerkClient.ts"],"sourcesContent":["import { createClerkClient } from '@clerk/backend';\nimport { constants } from '@clerk/backend/internal';\n\nimport { buildRequestLike, isPrerenderingBailout } from '../app-router/server/utils';\nimport { clerkMiddlewareRequestDataStorage } from './clerkMiddleware';\nimport {\n  API_URL,\n  API_VERSION,\n  DOMAIN,\n  IS_SATELLITE,\n  PROXY_URL,\n  PUBLISHABLE_KEY,\n  SDK_METADATA,\n  SECRET_KEY,\n  TELEMETRY_DEBUG,\n  TELEMETRY_DISABLED,\n} from './constants';\nimport { decryptClerkRequestData, getHeader } from './utils';\n\nconst clerkClientDefaultOptions = {\n  secretKey: SECRET_KEY,\n  publishableKey: PUBLISHABLE_KEY,\n  apiUrl: API_URL,\n  apiVersion: API_VERSION,\n  userAgent: `${PACKAGE_NAME}@${PACKAGE_VERSION}`,\n  proxyUrl: PROXY_URL,\n  domain: DOMAIN,\n  isSatellite: IS_SATELLITE,\n  sdkMetadata: SDK_METADATA,\n  telemetry: {\n    disabled: TELEMETRY_DISABLED,\n    debug: TELEMETRY_DEBUG,\n  },\n};\n\nconst createClerkClientWithOptions: typeof createClerkClient = options =>\n  createClerkClient({ ...clerkClientDefaultOptions, ...options });\n\n/**\n * Constructs a BAPI client that accesses request data within the runtime.\n * Necessary if middleware dynamic keys are used.\n */\nconst clerkClient = async () => {\n  let requestData;\n\n  try {\n    const request = await buildRequestLike();\n    const encryptedRequestData = getHeader(request, constants.Headers.ClerkRequestData);\n    requestData = decryptClerkRequestData(encryptedRequestData);\n  } catch (err) {\n    if (err && isPrerenderingBailout(err)) {\n      throw err;\n    }\n  }\n\n  // Fallbacks between options from middleware runtime and `NextRequest` from application server\n  const options = clerkMiddlewareRequestDataStorage.getStore()?.get('requestData') ?? requestData;\n  if (options?.secretKey || options?.publishableKey) {\n    return createClerkClientWithOptions(options);\n  }\n\n  return createClerkClientWithOptions({});\n};\n\nexport { clerkClient };\n"],"mappings":"AAAA,SAAS,yBAAyB;AAClC,SAAS,iBAAiB;AAE1B,SAAS,kBAAkB,6BAA6B;AACxD,SAAS,yCAAyC;AAClD;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,yBAAyB,iBAAiB;AAEnD,MAAM,4BAA4B;AAAA,EAChC,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,WAAW,GAAG,eAAY,IAAI,OAAe;AAAA,EAC7C,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,aAAa;AAAA,EACb,aAAa;AAAA,EACb,WAAW;AAAA,IACT,UAAU;AAAA,IACV,OAAO;AAAA,EACT;AACF;AAEA,MAAM,+BAAyD,aAC7D,kBAAkB,EAAE,GAAG,2BAA2B,GAAG,QAAQ,CAAC;AAMhE,MAAM,cAAc,YAAY;AA1ChC;AA2CE,MAAI;AAEJ,MAAI;AACF,UAAM,UAAU,MAAM,iBAAiB;AACvC,UAAM,uBAAuB,UAAU,SAAS,UAAU,QAAQ,gBAAgB;AAClF,kBAAc,wBAAwB,oBAAoB;AAAA,EAC5D,SAAS,KAAK;AACZ,QAAI,OAAO,sBAAsB,GAAG,GAAG;AACrC,YAAM;AAAA,IACR;AAAA,EACF;AAGA,QAAM,WAAU,6CAAkC,SAAS,MAA3C,mBAA8C,IAAI,mBAAlD,YAAoE;AACpF,OAAI,mCAAS,eAAa,mCAAS,iBAAgB;AACjD,WAAO,6BAA6B,OAAO;AAAA,EAC7C;AAEA,SAAO,6BAA6B,CAAC,CAAC;AACxC;","names":[]}