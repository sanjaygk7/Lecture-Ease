import { constants } from "@clerk/backend/internal";
import { decodeJwt } from "@clerk/backend/jwt";
import { isTruthy } from "@clerk/shared/underscore";
import { withLogger } from "../utils/debugLogger";
import { getAuthDataFromRequest } from "./data/getAuthDataFromRequest";
import { getAuthAuthHeaderMissing } from "./errors";
import { assertAuthStatus, getCookie, getHeader } from "./utils";
const createGetAuth = ({
  noAuthStatusMessage,
  debugLoggerName
}) => withLogger(debugLoggerName, (logger) => {
  return (req, opts) => {
    if (isTruthy(getHeader(req, constants.Headers.EnableDebug))) {
      logger.enable();
    }
    assertAuthStatus(req, noAuthStatusMessage);
    return getAuthDataFromRequest(req, { ...opts, logger });
  };
});
const getAuth = createGetAuth({
  debugLoggerName: "getAuth()",
  noAuthStatusMessage: getAuthAuthHeaderMissing()
});
const parseJwt = (req) => {
  var _a;
  const cookieToken = getCookie(req, constants.Cookies.Session);
  const headerToken = (_a = getHeader(req, "authorization")) == null ? void 0 : _a.replace("Bearer ", "");
  return decodeJwt(cookieToken || headerToken || "");
};
export {
  createGetAuth,
  getAuth,
  parseJwt
};
//# sourceMappingURL=createGetAuth.js.map